cmdhistory=["(use 'clojure.ini)" "(use 'clojure.ini/core)" "(use 'clojure-ini.core)" "(find-doc \\"ns\\")" "(read-ini \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\")" "(read-ini \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\" \:keywordize? true)" "(pprint (read-ini \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\" \:keywordize? true))" "(doc read-ini)" "(pprint (read-ini \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\" \:keywordize? true \:comment-char \\\\\#))" "(def cfg (pprint (read-ini \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\" \:keywordize? true \:comment-char \\\\\#)))" "cfg" "(def cfg (read-ini \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\" \:keywordize? true \:comment-char \\\\\#))" "cfg" "(pprint cfg)" "(merge (get-in cfg [\:default]) (get-in cfg [\:LAL]))" "(pprint (merge (get-in cfg [\:default]) (get-in cfg [\:LAL])))" "(doc merge)" "(System/getProperty \\"user.dir\\")" "(System/getProperty \\"user.home\\")" "(doc file)" "(locate file)" "(apropos file)" "(apropos \\"file\\")" "(doc file)" "(doc \\"file\\")" "(file (System/getProperty \\"user.home\\") \\".stratuslab\\" \\"stratuslab-user.cfg\\")" "(require '(clojure.java.io \:only file))" "(use '[clojure.java.io \:only file])" "(use '[clojure.java.io \:only (file)])" "(file (System/getProperty \\"user.home\\") \\".stratuslab\\" \\"stratuslab-user.cfg\\")" "(map \#(get-in cfg [%]) [\:default \:LAL])" "(pprint (map \#(get-in cfg [%]) [\:default \:LAL]))" "(pprint (apply merge (map \#(get-in cfg [%]) [\:default \:LAL])))" "(use cloud-client.configuration)" "(use 'cloud-client.configuration)" "(default-cfg-file)" "(read-cfg)" "(use 'cloud-client.configuration)" "(read-cfg)" "(cloud-cfg \:LAL)" "(use 'cloud-client.configuration)" "(use 'cloud-client.configuration \:reload)" "(use 'cloud-client.configuration)" "(use 'cloud-client.configuration \:reload)" "(cloud-cfg \:LAL)" "(cloud-cfg \:GRNET)" "(first nil)" "(first [])" "(file \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\")" "(.exists (file \\"/Users/loomis/.stratuslab/stratuslab-user.cfg\\"))" "(doc some)" "(some \#(.exists %)\\n        [(io/file (System/getProperty \\"user.dir\\")\\n                  \\"stratuslab-user.cfg\\")\\n         (io/file (System/getProperty \\"user.home\\")\\n                  \\".stratuslab\\"\\n                  \\"stratuslab-user.cfg\\")])" "(some \#(.exists %)\\n        [(file (System/getProperty \\"user.dir\\")\\n                  \\"stratuslab-user.cfg\\")\\n         (file (System/getProperty \\"user.home\\")\\n                  \\".stratuslab\\"\\n                  \\"stratuslab-user.cfg\\")])" "(or\\n    (io/file (System/getProperty \\"user.dir\\")\\n              \\"stratuslab-user.cfg\\")\\n     (io/file (System/getProperty \\"user.home\\")\\n              \\".stratuslab\\"\\n              \\"stratuslab-user.cfg\\"))" "(or\\n    (file (System/getProperty \\"user.dir\\")\\n              \\"stratuslab-user.cfg\\")\\n     (file (System/getProperty \\"user.home\\")\\n              \\".stratuslab\\"\\n              \\"stratuslab-user.cfg\\"))" "(\:require '[clojure.java.io \:as io])" "(first \\n    (filter \#(.exists %)\\n            [(io/file (System/getProperty \\"user.dir\\")\\n                     \\"stratuslab-user.cfg\\")\\n            (io/file (System/getProperty \\"user.home\\")\\n                     \\".stratuslab\\"\\n                     \\"stratuslab-user.cfg\\")]))" "(first \\n    (filter \#(.exists %)\\n            [(file (System/getProperty \\"user.dir\\")\\n                     \\"stratuslab-user.cfg\\")\\n            (file (System/getProperty \\"user.home\\")\\n                     \\".stratuslab\\"\\n                     \\"stratuslab-user.cfg\\")]))" "(doc lazy-seq)" "(use 'clj-http.client)" "(use 'cloud-client.storage)" "(storage)" "(storage \:list)" "(use 'cloud-client.storage \:reload)" "(storage \:list)" "(storage)" "(storage \:create)" "(storage \:create \:size 1 \:tag \\"hello storage\\" \:public true)" "(map [\:a \\"b\\" \:c \\"d\\"])" "(hash-map [\:a \\"b\\" \:c \\"d\\"])"]
eclipse.preferences.version=1
